{"version":3,"sources":["fbase.js","routes/Profile.js","components/AuthForm.js","components/SocialLinks.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","fireBaseInstance","authService","auth","dbService","firestore","storageService","storage","Profile","userObj","refreshUser","useState","displayName","newDisplayName","setNewDisplayName","history","useHistory","onSubmit","event","a","preventDefault","updateProfile","onChange","value","target","type","placeholder","onClick","signOut","push","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","autoComplete","required","prev","SocialLinks","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Auth","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","maxLength","src","alt","width","height","NweetFactory","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","createrId","collection","add","fileInput","useRef","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","current","Home","nweets","setNweets","useEffect","orderBy","onSnapshot","snapshot","nweetArray","docs","map","data","a_nweet","Navigation","to","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9410b975.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n  \r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const fireBaseInstance = firebase;\r\n\r\n// firebase의 모든것을 호출하는 대신 부분기능만 내보냄.\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n    // const [myNweets, setMyNweets] = useState(\"\");\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const history = useHistory();\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n/*     const getMyNweets = async() => {\r\n        const nweets = await dbService.collection(\"nweets\").where(\"createrId\", \"==\", userObj.uid).orderBy(\"createdAt\",\"desc\").get();\r\n        const nweetsMap = nweets.docs.map((doc) => doc.data().text);\r\n        setMyNweets(nweetsMap);\r\n    }\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    }) */\r\n    const onChange = (event) =>{\r\n        const {target: {value}} = event;\r\n        setNewDisplayName(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName){\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName,\r\n            })\r\n            refreshUser();\r\n        }\r\n    };\r\n    return (\r\n    <>\r\n        <form onSubmit={onSubmit} >\r\n            <input onChange={onChange} type=\"text\" value={newDisplayName} placeholder=\"display name\" />\r\n            <input type=\"submit\" value=\"Update Profile\" />\r\n        </form>\r\n        <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n    // 1) useState 사용해서 input 태그의 이메일, 패스워드 조작.\r\n    // 2) newAccount는 가입or로그인 화면 제어\r\n    // 3) error는 에러메시지 출력용.\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n/*  react에선 input태그가 입력받은 value를 사용자에게 보여주지 않음.\r\n    각 input마다 onChange 이벤트에 함수를 부여해서 제어. */\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        } else if(name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    };\r\n    //newAccount 참거짓 판별 후 가입or로그인 버튼 출력.\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try{\r\n            if(newAccount){\r\n                await authService.createUserWithEmailAndPassword(email, password);\r\n            } else {\r\n                await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n        } catch(error) {\r\n            setError(error.message);\r\n        }\r\n    };\r\n    const toggleAccount = () => setNewAccount(prev => !prev);\r\n    return(\r\n        <>\r\n        <form onSubmit={onSubmit}>\r\n        <input name=\"email\" type=\"text\" placeholder=\"Email\" value={email} onChange={onChange} autoComplete=\"username\" required/>\r\n        <input name=\"password\" type=\"password\" placeholder=\"Password\" value={password} onChange={onChange} autoComplete=\"current-password\" required/>\r\n        <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} required/>\r\n        {error}\r\n    </form>\r\n    <span onClick={toggleAccount}>{newAccount ? \"Sign in\" : \"Create Account\" }</span>\r\n    </>\r\n    );\r\n};\r\nexport default AuthForm;","import { authService, fireBaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\n\r\nconst SocialLinks = () => {\r\n    //가입하면 newAccount가 거짓이니 false로 바꿔주고, 반대도 마찬가지로 뒤집어주는 작업.\r\n    //구글, 깃헙으로 로그인\r\n    const onSocialClick = async (event) => {\r\n        const { target: { name }} = event;\r\n        let provider;\r\n        if(name === \"google\"){\r\n            provider = new fireBaseInstance.auth.GoogleAuthProvider();\r\n        } else if(name === \"github\"){\r\n            provider = new fireBaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        await authService.signInWithPopup(provider);\r\n    };\r\n    return(\r\n        <>\r\n        <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\r\n        <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SocialLinks;","import AuthForm from \"components/AuthForm\";\r\nimport SocialLinks from \"components/SocialLinks\";\r\n\r\n//인증 컴포넌트\r\nconst Auth = () => {\r\n\r\n    //화면 리턴\r\n    return(\r\n    <div>\r\n        <AuthForm />\r\n        <div>\r\n        <SocialLinks />\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\nexport default Auth;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n        if(ok) {\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n            if(nweetObj.attachmentUrl !== \"\") {\r\n                await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n            }\r\n        }\r\n    };\r\n    const toggleEditing = () => setEditing(prev => !prev);\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet\r\n        });\r\n        setEditing(false);\r\n    };\r\n    const onChange = (event) => {\r\n        const {target :{value}} = event;\r\n        setNewNweet(value);\r\n    };\r\n    return (\r\n        <div>\r\n            {editing ? \r\n                <>\r\n                {isOwner && <>\r\n                <form onSubmit={onSubmit} >\r\n                    <input onChange={onChange} type=\"text\" placeholder=\"Edit your nweet\" value={newNweet} maxLength=\"80\" required />\r\n                    <input type=\"submit\" value=\"Update Nweet\" />\r\n                </form>\r\n                <button onClick={toggleEditing} >Cancel</button>\r\n                </>\r\n                }\r\n                </>\r\n                :\r\n                <>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {nweetObj.attachmentUrl && \r\n                    (\r\n                        <img src={nweetObj.attachmentUrl} alt=\"img\" width=\"50px\" height=\"50px\" />\r\n                    )\r\n                    }\r\n                    { isOwner && (\r\n                    <>\r\n                        <button onClick={onDeleteClick} >Delete Nweet</button>\r\n                        <button onClick={toggleEditing} >Edit Nweet</button>\r\n                    </>\r\n                    )}\r\n                 </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nweet;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if(attachment !== \"\"){\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            createrId: userObj.uid,\r\n            attachmentUrl\r\n        };\r\n         await dbService.collection(\"nweets\").add(nweetObj);\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n    const onChange = (event) => {\r\n        const { target: {value}} = event;\r\n        setNweet(value);\r\n    };\r\n    const onFileChange = (event) => { \r\n        const {target:{files}} = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {currentTarget:{result}} = finishedEvent;\r\n            setAttachment(result);\r\n        };\r\n        reader.readAsDataURL(theFile);\r\n    };\r\n    const onClearAttachment = () => {\r\n        fileInput.current.value = null;\r\n        setAttachment(\"\");\r\n    };\r\n    const fileInput = useRef();\r\n    return(\r\n        <form onSubmit={onSubmit}>\r\n            <input value={nweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength=\"80\" />\r\n            <input type=\"file\" accept=\"image/*\" onChange={onFileChange} ref={fileInput} />\r\n            <input type=\"submit\" value=\"Nweet\" />\r\n            {attachment && \r\n            <div>\r\n                <img src={attachment} alt=\"img\" width=\"50px\" height=\"50px\" />\r\n                <button onClick={onClearAttachment} >Clear</button>\r\n            </div>\r\n            }\r\n        </form>\r\n    );\r\n};\r\nexport default NweetFactory;","import Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\nimport { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Home = ({ userObj }) => {\r\n    const [nweets, setNweets] = useState([]);\r\n    // 1) 컴포넌트 mount될때 실행.\r\n    // 2) nweets컬렉션에서 스냅샷들 가져옴(일종의 데이터). orderby로 시간차순 정렬.\r\n    // 3) 그걸 map으로 분해 후, nweetArray에 할당. 마지막으로 setNweets로 nweets에 배열 다시 보냄.\r\n    useEffect(() => {\r\n        dbService.collection(\"nweets\").orderBy(\"createdAt\",\"desc\").onSnapshot((snapshot) => {\r\n            const nweetArray = snapshot.docs.map(doc => ({\r\n                id:doc.id, \r\n                ...doc.data(),\r\n            }));\r\n            setNweets(nweetArray);\r\n        });\r\n    }, []);\r\n\r\n    return(\r\n    <div>\r\n        <NweetFactory userObj={userObj} />\r\n        <div>\r\n            {/* nweets에서 받아온 배열을 map으로 분해 및 텍스트 출력. */}\r\n            {nweets.map((a_nweet) => (\r\n                <Nweet key={a_nweet.id} nweetObj={a_nweet} isOwner={a_nweet.createrId === userObj.uid} />\r\n            ))} \r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n    if(userObj.displayName === null){\r\n        userObj.displayName = \"익명\";\r\n    }\r\n    return(\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/profile\"> {userObj.displayName}'s Profile </Link>\r\n            </li>\r\n        </ul>\r\n</nav>\r\n    );\r\n}\r\n;\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Profile from \"routes/Profile\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n    return(\r\n    <Router>\r\n        {isLoggedIn && <Navigation userObj={userObj} />}\r\n        <Switch>\r\n            {isLoggedIn ? (\r\n            <>\r\n                <Route exact path=\"/nwitter/\">\r\n                    <Home userObj={userObj} />\r\n                </Route>\r\n                <Route exact path=\"/nwitter/profile\">\r\n                    <Profile userObj={userObj} refreshUser={refreshUser} />\r\n                </Route>\r\n            </>\r\n            ) : (\r\n                <Route exact path=\"/nwitter/\">\r\n                    <Auth />\r\n                </Route>\r\n                )}\r\n        </Switch>\r\n    </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () =>{\n    const user = authService.currentUser;\n      setUserObj({\n        displayName: user.displayName,\n        uid: user.uid,\n        updateProfile: (args) => user.updateProfile(args),\n      });\n  };\n  return (\n    <>\n     {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj} /> : \"initializing...\" }\n      <footer>&copy; {new Date().getFullYear()} Nwitter</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}